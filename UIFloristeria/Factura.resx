<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>